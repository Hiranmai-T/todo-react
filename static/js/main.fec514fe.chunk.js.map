{"version":3,"sources":["context/TaskContext.js","components/Task.js","components/TaskList.js","components/TaskForm.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["TaskContext","createContext","TaskContextProvider","props","initialState","JSON","parse","localStorage","getItem","useState","tasks","setTasks","editItem","setEditItem","useEffect","setItem","stringify","Provider","value","addTask","title","id","uuidv4","status","removeTask","filter","task","clearTasks","findItem","item","find","console","log","editTask","newTasks","map","modifyStatus","clearComplete","children","Task","useContext","style","setStyle","op","setOp","setStatus","color","setColor","className","Card","CardBody","name","type","onChange","backgroundColor","textDecoration","opacity","onClick","TaskList","count","setCount","completeCount","setCompleteCount","viewTasks","setViewTasks","countTemp","length","countTemp2","key","displayActive","displayCompleted","TaskForm","setTitle","onSubmit","e","preventDefault","autoComplete","target","placeholder","required","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fec514fe.chunk.js","sourcesContent":["import React,{createContext,useState,useEffect} from 'react';\r\nimport {v4 as uuidv4 } from 'uuid';\r\n\r\nexport const TaskContext = createContext();\r\n\r\nconst TaskContextProvider = (props) => {\r\n    const initialState = JSON.parse(localStorage.getItem('tasks')) || [];\r\n\r\n    const [tasks,setTasks]  = useState(initialState);\r\n\r\n    const [editItem, setEditItem ] = useState(null);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('tasks',JSON.stringify(tasks))\r\n    },[tasks]);\r\n\r\n    const addTask = (title) =>{\r\n        setTasks([...tasks,{title,id:uuidv4(),status:false}]);\r\n    };\r\n\r\n    const removeTask = (id) => {\r\n        setTasks(tasks.filter((task)=> task.id!==id));\r\n    };\r\n\r\n    const clearTasks = () => {\r\n        setTasks([]);\r\n    };\r\n\r\n    const findItem = (id) => {\r\n        const item = tasks.find((task) => task.id===id);\r\n        console.log(\"Hello\");\r\n        setEditItem(item);\r\n    };\r\n\r\n    const editTask = (title,id) => {\r\n        const newTasks = tasks.map((task) => (task.id===id)? {title,id,status:false} : task );\r\n        setTasks(newTasks);\r\n        setEditItem(null);\r\n    };\r\n\r\n    const modifyStatus = (id) => {\r\n        const newTasks = tasks.map((task) => (task.id===id)? {title:task.title,id,status:!task.status} : task);\r\n        setTasks(newTasks);\r\n    };\r\n\r\n    const clearComplete = () => {\r\n        const newTasks = tasks.filter((task) => task.status===false);\r\n        setTasks(newTasks)\r\n    }\r\n\r\n    return(\r\n        <TaskContext.Provider value={{\r\n            tasks, \r\n            addTask, \r\n            removeTask, \r\n            clearTasks, \r\n            findItem, \r\n            editTask, \r\n            editItem,\r\n            modifyStatus,\r\n            clearComplete\r\n            }}>\r\n\r\n            {props.children}\r\n\r\n        </TaskContext.Provider>\r\n    );\r\n};\r\n\r\nexport default TaskContextProvider;","import React,{useContext,useState,useEffect} from 'react';\r\nimport {TaskContext} from '../context/TaskContext';\r\nimport { Card, CardBody } from 'reactstrap';\r\n\r\nconst Task = ({task}) => {\r\n    const {removeTask, findItem,modifyStatus} = useContext(TaskContext);\r\n    const [style, setStyle] = useState('none');\r\n    const [op,setOp] = useState(1);\r\n    const [status, setStatus] = useState(task.status);\r\n    const [color,setColor] = useState('white');\r\n\r\n    useEffect(()=>{\r\n        if(status){\r\n            setOp(0.3);\r\n            setStyle('line-through');\r\n            setColor('rgba(175, 47, 47, 0.45)');\r\n        }else{\r\n            setOp(1);\r\n            setStyle('none');\r\n            setColor('white');\r\n        }\r\n    },[status]);\r\n\r\n    const handleChange = () => {\r\n        modifyStatus(task.id);\r\n        const temp = !status;\r\n        \r\n        setStatus(temp);\r\n        // if(temp){\r\n        //     // console.log(\"Test\");\r\n        //     setOp(0.3);\r\n        //     setStyle('line-through');\r\n        // }else{\r\n        //     setOp(1);\r\n        //     setStyle('none');\r\n        // }\r\n    };\r\n    \r\n    return (\r\n        <li>\r\n            {/*   */}\r\n            <div className=\"row  justify-content-center\">  \r\n            {/*   */}\r\n            <div className=\"col-12 task-row\">\r\n                <Card className=\"box-shadow-hover pointer\">\r\n                    <CardBody>\r\n                        \r\n                        <div className=\"row \">\r\n                            \r\n                            <div className=\"col-12 col-md-10\">\r\n                                \r\n                                    <input  name=\"status\" type = \"checkbox\" onChange={handleChange} style={{backgroundColor:color}}className=\"mr-3 my-auto checkbox-round\"\r\n                                    />\r\n                                \r\n                                    <span style={{textDecoration:style,opacity:op}} className=\"font task-title\">{task.title}</span>\r\n                                \r\n                            </div>\r\n                        \r\n                    \r\n                    \r\n                            <div className=\"col-12 col-md-2\">\r\n                                <div className=\"row\">\r\n                                <div className=\"col-2 col-md-1\">\r\n                                {\r\n                                    (!status)?(\r\n                                        <button onClick = {() => findItem(task.id)} className=\"btn btn-edit\">\r\n                                            <i className=\"fa fa-pencil\"></i>\r\n                                        </button>\r\n                                    ) : <></>\r\n                                \r\n                                }\r\n                                </div>\r\n                                <div className=\"col-2 col-md-1\">\r\n                                    <button onClick = {() => removeTask(task.id)} className=\"btn btn-delete\">\r\n                                        <i className=\"fa fa-trash\"></i>\r\n                                    </button>\r\n                                </div>\r\n                                </div>\r\n                            </div>\r\n                            \r\n                        </div>    \r\n                        \r\n                    </CardBody>\r\n                </Card>\r\n            </div>\r\n            </div> \r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Task\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { TaskContext } from \"../context/TaskContext\";\r\nimport Task from \"./Task\";\r\n\r\nconst TaskList = () => {\r\n  const { tasks,clearComplete } = useContext(TaskContext);\r\n  const [count, setCount] = useState(null);\r\n  const [completeCount, setCompleteCount ] = useState(0);\r\n  const [viewTasks, setViewTasks] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const countTemp = tasks.filter((task) => task.status === false).length;\r\n    const countTemp2 = tasks.filter((task) => task.status===true).length;\r\n    setViewTasks(tasks);\r\n    setCompleteCount(countTemp2);\r\n    setCount(countTemp);\r\n  }, [tasks]);\r\n  \r\n  \r\n\r\n  const displayAll = () => {\r\n     setViewTasks(tasks);\r\n  };\r\n\r\n  const displayActive = () => {\r\n     const newTasks = tasks.filter((task) => task.status===false);\r\n     setViewTasks(newTasks);\r\n  };\r\n\r\n  const displayCompleted = () => {\r\n     const newTasks = tasks.filter((task) => task.status===true);\r\n     setViewTasks(newTasks);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/*className=\"row justify-content-center\" */}\r\n      <div className=\"row justify-content-center\">\r\n        {\" \"}\r\n        {/*className=\"col-12 col-md-7 paper\" */}\r\n        {/* {viewTasks.length===0 ? setViewTasks(tasks) : console.log(\"Non Empty\")} */}\r\n        {tasks.length ? (\r\n          <>\r\n            <ul className=\"col-md-7 list paper\">\r\n              {viewTasks.map((task) => {\r\n                return <Task task={task} key={task.id} />;\r\n              })}\r\n              <li className=\"row\">\r\n                <div className=\"col-3\">\r\n                  {count > 0 ? (\r\n                    <div className=\"row justify-content-center\">\r\n                      <p className=\"font task-count\">{count} task(s) left</p>\r\n                    </div>\r\n                  ) : (\r\n                    <></>\r\n                  )}\r\n                </div>\r\n                <div className=\"col-5 my-auto\">\r\n                  <button className=\"btn banner-button\" onClick = {()=> displayAll()}>All</button>\r\n                  <button className=\"btn banner-button\" onClick={()=>displayActive()}>Active</button>\r\n                  <button className=\"btn banner-button\" onClick={()=>displayCompleted()}>Completed</button>\r\n                </div>\r\n                <div className=\"col-4  my-auto\">\r\n                    {completeCount > 0 ? (\r\n                        <button className=\"btn banner-button\" onClick={()=>clearComplete()}>Clear Completed</button>\r\n                    ) : (<></>)}\r\n                </div>\r\n              </li>\r\n            </ul>\r\n          </>\r\n        ) : (\r\n          <div className=\"row justify-content-center\">\r\n            <p className=\"font no-tasks\">No tasks</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n","import React, {useContext, useState, useEffect} from 'react';\r\nimport {TaskContext} from '../context/TaskContext';\r\n\r\nconst TaskForm = () => {\r\n    const {addTask, editItem, editTask} = useContext(TaskContext);\r\n    const [title, setTitle] = useState('');\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(editItem===null){\r\n            addTask(title);\r\n            setTitle('');\r\n        }else{\r\n            console.log(title);\r\n            editTask(title,editItem.id);\r\n            // setTitle('');\r\n        }\r\n        \r\n    };\r\n\r\n    const handleChange = (e) => {\r\n        setTitle(e.target.value);\r\n        \r\n    };\r\n\r\n    useEffect(()=>{\r\n        if(editItem!==null){\r\n            \r\n            setTitle(editItem.title);\r\n        }else{\r\n            setTitle('');\r\n        }\r\n    }, [editItem]);\r\n    \r\n    // var input = document.getElementById(\"taskInput\");\r\n    //     input.addEventListener((\"keyup\"),function(event){\r\n    //         if(event.keyCode===13){\r\n    //         event.preventDefault();\r\n    //         document.getElementById(\"addTask\").click();\r\n    //     }\r\n    // });\r\n    \r\n    return (\r\n        <form onSubmit={handleSubmit} autoComplete=\"off\">\r\n            <div className=\"row justify-content-center mb-3\">\r\n                <input onChange = {handleChange} value={title} id=\"taskInput\" className=\"col-12 col-md-7  ml-4 mb-1 task-input font\" type=\"text\" placeholder=\"What needs to be done?\" required/>\r\n    \r\n                <button type=\"submit\" id=\"addTask\" className=\"btn btn-success add-btn font\" >\r\n                   {/* {editItem? \"Edit Task\" : \"Add Task\"}  col-12 col-md-1 ml-2 mb-1 */}\r\n                </button>\r\n                {/* <button type=\"submit\" onClick= {()=>clearTasks()} className=\"btn btn-danger col-12 col-md-1 mb-1 clear-btn font\">Clear</button> */}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default TaskForm\r\n","import React from 'react';\r\n\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"row justify-content-center\"> \r\n           \r\n            <h1 className=\"mb-3 header\">todos</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\nimport TaskListContextProvider from './context/TaskContext';\nimport TaskList from './components/TaskList';\nimport TaskForm from './components/TaskForm';\nimport Header from './components/Header'\nimport './App.css';\n// import CreateItem from './components/CreateItem';\n\nfunction App() {\n  return (\n    <div className=\"app \">\n    <TaskListContextProvider>\n        <div className=\"container\">      \n          <div className=\"main\">  \n            <Header />  \n            <TaskForm />\n            <TaskList />\n            </div>  \n        </div> \n    </TaskListContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'font-awesome/css/font-awesome.min.css';\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}